*--> En settings agregar al principio para que los path sean relativos al siton donde se desarrolla el proyecto.

import os # agregado por mi para que este al inicio del fichero
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))



*--> De momento desconecto en settings el requerimiento de Csfr. ojo, comentarlo de nuevo al pasarlo a produccion
MIDDLEWARE_
CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',


*--> Modificar url.py para que llegue al menos a la pagina home

*--> Crear en views la pagina de la home

*--> Organizate las views y los models como un package agregando __ini__.py

*--> Crear el directorio templates en el raiz de la aplicacion (no en la raiz del proyecto)

*--> Modificar settings de nuevo para que busque templates en el directorio que hemos creado
TEMPLATE_DIRS = (os.path.join(PROJECT_ROOT, '../TaskManager/templates')
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

*--> DRY links & Templates

*--> agregar ficheros estaticos
cambios en settings.py
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, '../TaskManager/static/')

Un ejemplo de utilizacion en un template (base.html)
{% load staticfiles %}
    <link href="{% static "css/style.css" %}" rel="stylesheet" type="text/css"/>

*--> modificar settings para incluir la bd
 DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': os.path.join(PROJECT_ROOT,'database.db'),# Or path to database file if using sqlite3.
        # The following settings are not used with sqlite3:
        'USER': '',
        'PASSWORD': '',
        'HOST': '',                      # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.
        'PORT': '',                      # Set to empty string for default.
    }
}

*--> modificar settings para incluir south
INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Uncomment the next line to enable the admin:
    'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
    'TaskManager',
    'south',
)

*--> llevar a cabo las migraciones iniciales

manage.py schemamigration TaskManager --initial
manage.py syncdb -- migrate (ojo, esta ultima linea solo se ejecuta una vez


luego se ejecuta
manage.py schemamigration TaskManager --auto
manage.py migrate TaskManager

*--> agregar un modulo de administration admin.py, una vez establecido el modulo de administracion para que funcione.


*--> establecer relaciones many to many si es necesario

*--> agregar el metodo __str__ en las clases del modelo para que se muestre correctamente en el administrador.
class UserProfile(models.Model):
    #aqui van los nombes de los campos
    def __str__(self):
        return self.name #si hemos elegido name como variable que define el campo

*--> agregar CRUD codigo en views para las paginas que sea necesario usando query-set

*--> crear formularios utilizando las facilidades de django


*--> url donde explica como incluir un plugin para la ley de cookies
http://blog.apsl.net/weblog/2014/02/13/ley-de-cookies-con-django/
la forma mas simple de poner el texto en espanol es creando en los templates de
la app un folder que se llame cookie law del que cuelgue banner.html


